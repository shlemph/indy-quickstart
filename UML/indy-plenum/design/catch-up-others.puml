@startuml

[*] --> Active

state Active {
    [*] --> LedgerStatusServantActive

    LedgerStatusServantActive --> LedgerStatusServantActive : Request for LedgerStatus / send LedgerStatus
    state LedgerStatusServantActive_LS <<choice>>
    LedgerStatusServantActive --> LedgerStatusServantActive_LS : LedgerStatus

    LedgerStatusServantActive_LS --> LedgerStatusServantActive : [older] / send ConsistencyProof
    LedgerStatusServantActive_LS --> LedgerStatusServantActive : [same]
    LedgerStatusServantActive_LS --> LedgerStatusServantActive : [newer] / send CheckIfLedgerLagged(ledgerId)
    --

    [*] --> ConsistenyProofServantActive

    state ConsistenyProofServantActive_ReqForCP <<choice>>
    ConsistenyProofServantActive --> ConsistenyProofServantActive_ReqForCP : Request for ConsistencyProof(..., end)
    state ConsistenyProofServantActive_CP <<choice>>
    ConsistenyProofServantActive --> ConsistenyProofServantActive_CP : ConsistencyProof

    ConsistenyProofServantActive_ReqForCP --> ConsistenyProofServantActive : [end <= ledger.size] / send ConsistencyProof(..., end)
    ConsistenyProofServantActive_ReqForCP --> ConsistenyProofServantActive : [end > ledger.size]

    ConsistenyProofServantActive_CP --> ConsistenyProofServantActive : [end <= ledger.size]
    ConsistenyProofServantActive_CP --> ConsistenyProofServantActive : [end > ledger.size] / send CheckIfLedgerLagged(ledgerId)
    --

    [*] --> CatchupReqServantActive

    state CatchupReqServantActive_CatchupReq <<choice>>
    CatchupReqServantActive --> CatchupReqServantActive_CatchupReq : CatchupReq(..., catchUpTill)

    CatchupReqServantActive_CatchupReq --> CatchupReqServantActive : [catchUpTill <= ledger.size] / send CatchupRep(...)
    CatchupReqServantActive_CatchupReq --> CatchupReqServantActive : [catchUpTill > ledger.size]
}

@enduml
