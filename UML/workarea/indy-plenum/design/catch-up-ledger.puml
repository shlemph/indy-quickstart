@startuml

[*] --> Finished

Finished --> Started : StartLedgerCatchup(ledgerId) / request LedgerStatuses from others

state Started_LedgerStatus <<choice>>
Started --> Started_LedgerStatus : LedgerStatus
state Started_ConsistencyProof <<choice>>
Started --> Started_ConsistencyProof : ConsistencyProof
Started --> Started : RequestAdjustedCPs / request CPs for median end from others; remove all received CPs

Started_LedgerStatus --> Started : [newer] / send own LedgerStatus backwards
state Started_LedgerStatus_NotNewer <<choice>>
Started_LedgerStatus --> Started_LedgerStatus_NotNewer : [not newer]

Started_LedgerStatus_NotNewer --> Finished : [gathered n-f-1 not newer LSes] / send LedgerCatchupFinished(ledgerId, lastTxn3PC)\nwhere lastTxn3PC is minimal quorumed 3PC-key from even LedgerStatuses\nif there are any quorumed or None otherwise
Started_LedgerStatus_NotNewer --> Started : [did not gather n-f-1 not newer LSes]

state Started_ConsistencyProof_Gathered <<choice>>
Started_ConsistencyProof --> Started_ConsistencyProof_Gathered : [gathered more than f+1 CPs]
Started_ConsistencyProof --> Started_ConsistencyProof_Gathered : [gathered exactly f+1 CPs] / schedule RequestAdjustedCPs after t1
Started_ConsistencyProof --> Started : [did not gather f+1 CPs]

Started_ConsistencyProof_Gathered --> Syncing : [gathered f+1 same CPs] / send CatchupReqs distributed among others; schedule RequestMissingTxns after t2
Started_ConsistencyProof_Gathered --> Started : [did not gather f+1 same CPs]

state Syncing_CatchupRep <<choice>>
Syncing --> Syncing : RequestMissingTxns / send CatchupReqs for missing txns distributed among shuffled others; schedule RequestMissingTxns after t2
Syncing --> Syncing_CatchupRep : CatchupRep / apply solid range adjacent to ledger of not yet applied received txns if such range exists

Syncing_CatchupRep --> Finished : [ledger.size == catchUpTill] / send LedgerCatchupFinished(ledgerId, lastTxn3PC)
Syncing_CatchupRep --> Syncing : [ledger.size < catchUpTill]

@enduml
